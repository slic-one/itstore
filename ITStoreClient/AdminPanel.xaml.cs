using System;
using System.Windows;
using System.Windows.Media;
using System.Data.SqlClient;
using System.Collections.ObjectModel;
using System.Linq;
using System.Collections.Generic;
using System.Data;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Text.RegularExpressions;

namespace ITStoreClient
{
    /// <summary>
    /// Interaction logic for AdminPanel.xaml
    /// </summary>
    public partial class AdminPanel : Window
    {
        private ShopEntities context;

        private ObservableCollection<User> users;
        private ObservableCollection<User> cashiers;

        private ObservableCollection<Product> products;
        private Product selectedProduct;
        public Dictionary<int, string> CategoryProperty { get; set; }
        public Dictionary<int, string> MarkUpProperty { get; set; }
        public Dictionary<int, string> MeasurementProperty { get; set; }
        public Dictionary<int, string> ProducerProperty { get; set; }

        private ObservableCollection<Producer> producers;
        private ObservableCollection<Supplier> suppliers;
        private ObservableCollection<Category> categories;
        private ObservableCollection<Markup> markUps;
        private ObservableCollection<Measurement> measurements;


        private ObservableCollection<Customer> customers;
        private Customer selectedCustomer;
        public Dictionary<int, string> DiscountProperty { get; set; }

        decimal totalSupply = 0;
        decimal? totalSale = 0;
        decimal? totalProfit = 0;

        private bool addOrdeleteIsPushed;
        private string tempCountry;
        private string tempTown;
        private string tempStreet;


        public AdminPanel()
        {
            InitializeComponent();
            context = new ShopEntities();

            users = GetUsers();
            UsersList.ItemsSource = users;
            UsersList.AutoGeneratedColumns += users_AutoGeneratedColumns;
            addUserButton.IsEnabled = false;

            DiscountProperty = GetDiscounts();
            customers = GetCustomers();
            CustomersList.ItemsSource = customers;
            CustomersList.AutoGeneratedColumns += customers_AutoGeneratedColumns;
            DiscountComboBox.ItemsSource = DiscountProperty.Values;
            addCustomerButton.IsEnabled = false;


            CategoryProperty = GetCategoriesList();
            MarkUpProperty = GetMarkUpsList();
            MeasurementProperty = GetMeasurmentsList();
            ProducerProperty = GetProdusersList();
            products = GetProducts();
            ProductsList.ItemsSource = products;
            ProductsList.AutoGeneratedColumns += products_AutoGeneratedColumns;
            CategoryComboBox.ItemsSource = CategoryProperty.Values;
            MarkupComboBox.ItemsSource = MarkUpProperty.Values;
            MeasurementComboBox.ItemsSource = MeasurementProperty.Values;
            ProducerComboBox.ItemsSource = ProducerProperty.Values;
            addProductButton.IsEnabled = false;


            producers = GetProducers();
            ProducersList.ItemsSource = producers;
            ProducersList.AutoGeneratedColumns += producers_AutoGeneratedColumns;
            addProducerButton.IsEnabled = false;
            SaveAddressButton.IsEnabled = false;

            suppliers = GetSuppliers();
            SuppliersList.ItemsSource = suppliers;
            SuppliersList.AutoGeneratedColumns += suppliers_AutoGeneratedColumns;
            addSupplierButton.IsEnabled = false;
            SaveSupplierAddressButton.IsEnabled = false;

            categories = GetCategories();
            CategoriesList.ItemsSource = categories;
            CategoriesList.AutoGeneratedColumns += categories_AutoGeneratedColumns;
            addCategoryButton.IsEnabled = false;


            cashiers = GetCashiers();
            cashierComboBox.ItemsSource = cashiers;
            customerComboBox.ItemsSource = customers.ToList();

            markUps = GetMarkUps();
            MarkUpList.ItemsSource = markUps;
            MarkUpList.AutoGeneratedColumns += markUps_AutoGeneratedColumns;
            addMarkUpButton.IsEnabled = false;

            measurements = GetMeasurements();
            MeasurementsList.ItemsSource = measurements;
            MeasurementsList.AutoGeneratedColumns += measurements_AutoGeneratedColumns;
            addMeasurementButton.IsEnabled = false;

            dataGridReport.AutoGeneratedColumns += reports_AutoGeneratedColumns;
        }

        #region User

        public ObservableCollection<User> GetUsers()
        {

            return new ObservableCollection<User>(
                    context.Users.Select(p => p).ToList<User>());
        }

        //change title of columns in datagridview
        void users_AutoGeneratedColumns(object sender, EventArgs e)
        {
            UsersList.Columns[0].Header = "Код користувача";
            UsersList.Columns[1].Header = "Ім'я";
            UsersList.Columns[2].Header = "Логін";
            UsersList.Columns[3].Header = "Пароль";
            UsersList.Columns[4].Header = "Адміністратор";
            UsersList.Columns[5].Visibility = Visibility.Hidden;//hide column
        }

        private void AddUser_Click(object sender, RoutedEventArgs e)
        {
            if (UserName.Text.Length > 0 && UserLogin.Text.Length > 0 && UserPassword.Text.Length > 0)
            {

                context.Users.Add(new User { Name = UserName.Text, Login = UserLogin.Text, Password = UserPassword.Text, Admin = UserIsAdmin.IsChecked.Value });
                context.SaveChanges();
                users = GetUsers();

                UsersList.ItemsSource = users;
                addUserButton.IsEnabled = false;
            }
            else
            {
                MessageBox.Show("Всі поля повинні бути заповненими!");
            }

            //int lastId = (int)users.Last().idUser + 1;
            //users.Add(new User { idUser = lastId, Name = UserName.Text, Login = UserLogin.Text, Password = UserPassword.Text, Admin = UserIsAdmin.IsChecked.Value });
        }

        private void DeleteUser_Click(object sender, RoutedEventArgs e)
        {

            context.Users.Remove((User)UsersList.SelectedItem);
            users.Remove((User)UsersList.SelectedItem);
            addUserButton.IsEnabled = false;

        }

        private void ClearUserTextBoxes_Click(object sender, RoutedEventArgs e)
        {
            UsersList.SelectedItem = null;
            addUserButton.IsEnabled = true;
            UserId.Text = "генерується автоматично";

        }

        private void UsersList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (UsersList.SelectedItem != null)
            {
                addUserButton.IsEnabled = false;
            }
        }
        private void UserName_TextChanged(object sender, TextChangedEventArgs e)
        {
            var txt = sender as TextBox;
            if (Regex.IsMatch(txt.Text, @"^[\p{Lu}A-Z][\p{IsCyrillic}a-zA-Z ]+$") || txt.Text.Length == 0)
            {
                txt.Background = Brushes.White;
                saveChangesUserButton.IsEnabled = true;
                if (UsersList.SelectedItem == null)
                    addUserButton.IsEnabled = true;
            }
            else
            {
                txt.Background = Brushes.LightCoral;
                saveChangesUserButton.IsEnabled = false;
                if (UsersList.SelectedItem == null)
                    addUserButton.IsEnabled = false;
            }
        }
        #endregion

        #region Customer


        private Dictionary<int, string> GetDiscounts()
        {
            return new Dictionary<int, string>(context.CustomerDiscounts.Select(p => new { p.idDiscount, p.Percent }).ToDictionary(p => p.idDiscount, p => p.Percent.ToString()));
        }

        public ObservableCollection<Customer> GetCustomers()
        {

            return new ObservableCollection<Customer>(
                    context.Customers.Select(p => p).ToList<Customer>());
        }

        //change title of columns in datagridview
        void customers_AutoGeneratedColumns(object sender, EventArgs e)
        {
            CustomersList.Columns[0].Header = "Код клієнта";
            CustomersList.Columns[1].Header = "Ім'я";
            CustomersList.Columns[2].Header = "Прізвище";
            CustomersList.Columns[3].Header = "Сума покупок";
            CustomersList.Columns[4].Visibility = Visibility.Hidden; //hide column
            CustomersList.Columns[5].Header = "Знижка %";
            CustomersList.Columns[6].Visibility = Visibility.Hidden;
        }


        private void AddCustomer_Click(object sender, RoutedEventArgs e)
        {
            if (CustomerId.Text.Length>0&&CustomerName.Text.Length > 0 && CustomerSurname.Text.Length > 0 && CustomerSpentMoney.Text.Length > 0 )
            {
                addOrdeleteIsPushed = true;

                int id = DiscountProperty.Where(x => x.Value.Equals(DiscountComboBox.SelectedValue.ToString())).FirstOrDefault().Key;
                long cID = long.Parse(CustomerId.Text);
                context.Customers.Add(new Customer { idCustomer = cID, Name = CustomerName.Text, Surname = CustomerSurname.Text, Spended_Money = Decimal.Parse(CustomerSpentMoney.Text), idDiscount = id });
                context.SaveChanges();
                customers = GetCustomers();
                CustomersList.ItemsSource = customers;

                addOrdeleteIsPushed = false;

                addCustomerButton.IsEnabled = false;
                CustomerId.IsReadOnly = true;

                addCustomerButton.IsEnabled = false;
                CustomerId.IsReadOnly = true;
                CustomerId.Background = Brushes.LightGray;
            }
            else
            {
                MessageBox.Show("Всі поля повинні бути заповненими!");
            }
            // CustomerDiscount cDiscount = new CustomerDiscount {idDiscount=id,Title=" ",Percent= Int32.Parse(DiscountComboBox.SelectedValue.ToString()) };
            // customers.Add(new Customer { idCustomer = long.Parse(CustomerId.Text), Name = CustomerName.Text, Surname = CustomerSurname.Text, Spended_Money = Decimal.Parse(CustomerSpentMoney.Text), idDiscount = id, CustomerDiscount=cDiscount});

        }


        private void DeleteCustomer_Click(object sender, RoutedEventArgs e)
        {
            addOrdeleteIsPushed = true;
            context.Customers.Remove((Customer)CustomersList.SelectedItem);
            customers.Remove((Customer)CustomersList.SelectedItem);
            addOrdeleteIsPushed = false;
            addCustomerButton.IsEnabled = false;

        }

        //event for change selection in datagridview(CustomersList) and change selectedItem value in DiscountCombobox
        private void CustomersList_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
        {
            if (CustomersList.SelectedItems.Count > 0)
            {
                addCustomerButton.IsEnabled = false;
                CustomerId.IsReadOnly = true;
                CustomerId.Background = Brushes.LightGray;
            }
            if (addOrdeleteIsPushed != true && CustomersList.SelectedItems.Count > 0)
            {
                if (CustomersList.SelectedItems != null)
                {
                    selectedCustomer = CustomersList.SelectedItems[0] as Customer;
                    DiscountComboBox.SelectedItem = DiscountProperty[selectedCustomer.idDiscount];

                }
                else
                {
                    DiscountComboBox.SelectedItem = DiscountProperty.First().Value;
                }
            }
        }

        //event for change selection in combobox (DiscountCombobox) and transfer it to datagridview
        private void DiscountComboBox_DropDownClosed(object sender, EventArgs e)
        {

            if (selectedCustomer != null && CustomersList.SelectedItems.Count > 0)
            {
                string percent = ((sender as ComboBox).SelectedValue.ToString()); //get selected value in combobox
                GetCell(CustomersList, 5).Content = Int32.Parse(percent); //change discount value in selected cell

                int key = DiscountProperty.Where(x => x.Value.Equals(percent)).FirstOrDefault().Key; //get key by selected value in combobox
                                                                                                     
                if (key != context.Customers.Where(x => x.idCustomer == selectedCustomer.idCustomer).FirstOrDefault().idDiscount)
                {
                    context.Customers.Where(x => x.idCustomer == selectedCustomer.idCustomer).FirstOrDefault().idDiscount = key;  //change idDiscount in Database

                }

            }


        }

        private void ClearCustomerTextBoxes_Click(object sender, RoutedEventArgs e)
        {
            CustomersList.SelectedItem = null;
            addCustomerButton.IsEnabled = true;
            CustomerId.IsReadOnly = false;
            CustomerId.Background = Brushes.White;
            DiscountComboBox.SelectedItem = DiscountProperty.First().Value;
            
        }
        private void CustomerId_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (CustomersList.SelectedItem == null)
            {
                var txt = sender as TextBox;
                if (Regex.IsMatch(txt.Text, @"^[0-9]+$") || txt.Text.Length == 0)
                {
                    TextboxCustomerIsCorrect(txt);
                }
                else
                {
                    TextboxCustomerIsInCorrect(txt);
                }
            }
        }
        private void CustomerSurname_TextChanged(object sender, TextChangedEventArgs e)
        {
            
                var txt = sender as TextBox;
                if (Regex.IsMatch(txt.Text, @"^[\p{Lu}A-Z][\p{IsCyrillic}a-zA-Z -]+$") || txt.Text.Length == 0)
                {
                    TextboxCustomerIsCorrect(txt);
                }
                else
                {
                    TextboxCustomerIsInCorrect(txt);
                }
           
        }
        private void CustomerName_TextChanged(object sender, TextChangedEventArgs e)
        {
                var txt = sender as TextBox;
                if (Regex.IsMatch(txt.Text, @"^[\p{Lu}A-Z][\p{IsCyrillic}a-zA-Z -]+$") || txt.Text.Length == 0)
                {
                TextboxCustomerIsCorrect(txt);
                }
                else
                {
                TextboxCustomerIsInCorrect(txt);
                }
            
        }
        private void CustomerSpended_Money_TextChanged(object sender, TextChangedEventArgs e)
        {
                var txt = sender as TextBox;
                if (Regex.IsMatch(txt.Text, @"(^[0-9]+$|^(?:0|[1-9][0-9]*)\.[0-9]+$)") || txt.Text.Length == 0)
                {
                TextboxCustomerIsCorrect(txt);
                }
                else
                {
                TextboxCustomerIsInCorrect(txt);
                }
           
        }
        private void TextboxCustomerIsCorrect(TextBox txt)
        {
            txt.Background = Brushes.White;
            saveChangesCustomerButton.IsEnabled = true;
            if (CustomersList.SelectedItem == null)
                addCustomerButton.IsEnabled = true;
        }
        private void TextboxCustomerIsInCorrect(TextBox txt)
        {
            txt.Background = Brushes.LightCoral;
            saveChangesCustomerButton.IsEnabled = false;
            if (CustomersList.SelectedItem == null)
                addCustomerButton.IsEnabled = false;
        }
        #endregion

        #region Product

        private Dictionary<int, string> GetCategoriesList()
        {
            return new Dictionary<int, string>(context.Categories.Select(p => new { p.idCatedory, p.Name }).ToDictionary(p => p.idCatedory, p => p.Name));
        }
        private Dictionary<int, string> GetMarkUpsList()
        {
            return new Dictionary<int, string>(context.Markups.Select(p => new { p.idMarkup, p.Percent }).ToDictionary(p => p.idMarkup, p => p.Percent.ToString()));
        }
        private Dictionary<int, string> GetMeasurmentsList()
        {
            return new Dictionary<int, string>(context.Measurements.Select(p => new { p.idMeasurement, p.Description }).ToDictionary(p => p.idMeasurement, p => p.Description));
        }
        private Dictionary<int, string> GetProdusersList()
        {
            return new Dictionary<int, string>(context.Producers.Select(p => new { p.idProducer, p.Name }).ToDictionary(p => p.idProducer, p => p.Name));
        }


        public ObservableCollection<Product> GetProducts()
        {

            return new ObservableCollection<Product>(
                    context.Products.Select(p => p).ToList<Product>());
        }
        //change title of columns in datagridview
        void products_AutoGeneratedColumns(object sender, EventArgs e)
        {
            ProductsList.Columns[0].Header = "Код товару";
            ProductsList.Columns[1].Header = "Назва";
            ProductsList.Columns[2].Visibility = Visibility.Hidden;
            ProductsList.Columns[3].Header = "Ціна";
            ProductsList.Columns[4].Header = "Кількість";
            ProductsList.Columns[5].Visibility = Visibility.Hidden;
            ProductsList.Columns[6].Visibility = Visibility.Hidden;
            ProductsList.Columns[7].Visibility = Visibility.Hidden;
            ProductsList.Columns[8].Header = "Категорія";
            ProductsList.Columns[9].Visibility = Visibility.Hidden;
            ProductsList.Columns[10].Header = "Націнка %";
            ProductsList.Columns[11].Header = "Одиниця виміру";
            ProductsList.Columns[12].Header = "Виробник";
            ProductsList.Columns[13].Visibility = Visibility.Hidden;
        }
        private void DeleteProduct_Click(object sender, RoutedEventArgs e)
        {
            addOrdeleteIsPushed = true;
            context.Products.Remove((Product)ProductsList.SelectedItem);
            products.Remove((Product)ProductsList.SelectedItem);
            addOrdeleteIsPushed = false;
            addProductButton.IsEnabled = false;
        }

        private void AddProduct_Click(object sender, RoutedEventArgs e)
        {
            if (ProductId.Text.Length > 0 && ProductName.Text.Length > 0 && ProductPrice.Text.Length > 0 && ProductQuantity.Text.Length > 0)
            {
                addOrdeleteIsPushed = true;
            int CategoryId = CategoryProperty.Where(x => x.Value.Equals(CategoryComboBox.SelectedValue.ToString())).FirstOrDefault().Key;
            int MarkUpId = MarkUpProperty.Where(x => x.Value.Equals(MarkupComboBox.SelectedValue.ToString())).FirstOrDefault().Key;
            int MeasurementId = MeasurementProperty.Where(x => x.Value.Equals(MeasurementComboBox.SelectedValue.ToString())).FirstOrDefault().Key;
            int ProducerId = ProducerProperty.Where(x => x.Value.Equals(ProducerComboBox.SelectedValue.ToString())).FirstOrDefault().Key;


            context.Products.Add(new Product { idProduct = long.Parse(ProductId.Text), Name = ProductName.Text, idCategory = CategoryId, Price = Decimal.Parse(ProductPrice.Text), Quantity = Decimal.Parse(ProductQuantity.Text), idProducer = ProducerId, idMarkup = MarkUpId, idMeasurement = MeasurementId });
            context.SaveChanges();
            products = GetProducts();
            ProductsList.ItemsSource = products;
            addOrdeleteIsPushed = false;

                addProductButton.IsEnabled = false;
            }
            else
            {
                MessageBox.Show("Всі поля повинні бути заповненими!");
            }

        }

        private void ProductsList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ProductsList.SelectedItems.Count > 0)
            {
                addProductButton.IsEnabled = false;
                ProductId.IsReadOnly = true;
                ProductId.Background = Brushes.LightGray;
            }
            if (addOrdeleteIsPushed != true && ProductsList.SelectedItems.Count > 0)
            {
                selectedProduct = ProductsList.SelectedItems[0] as Product;
                if (selectedProduct != null)
                {
                    CategoryComboBox.SelectedItem = CategoryProperty[selectedProduct.idCategory];
                    MarkupComboBox.SelectedItem = MarkUpProperty[selectedProduct.idMarkup];
                    MeasurementComboBox.SelectedItem = MeasurementProperty[selectedProduct.idMeasurement];
                    ProducerComboBox.SelectedItem = ProducerProperty[selectedProduct.idProducer];
                }
                else
                {
                    CategoryComboBox.SelectedItem = CategoryProperty.First().Value;
                    MarkupComboBox.SelectedItem = MarkUpProperty.First().Value;
                    MeasurementComboBox.SelectedItem = MeasurementProperty.First().Value;
                    ProducerComboBox.SelectedItem = ProducerProperty.First().Value;
                }
            }

        }

        private void CategoryComboBox_DropDownClosed(object sender, EventArgs e)
        {
            if (selectedProduct != null)
            {
                string name = ((sender as ComboBox).SelectedValue.ToString()); //get selected value in combobox
                GetCell(ProductsList, 8).Content = name; //change category value in selected cell

                int key = CategoryProperty.Where(x => x.Value.Equals(name)).FirstOrDefault().Key; //get key by selected value in combobox

                if (key != context.Products.Where(x => x.idProduct == selectedProduct.idProduct).FirstOrDefault().idCategory)
                {
                    context.Products.Where(x => x.idProduct == selectedProduct.idProduct).FirstOrDefault().idCategory = key;  //change idCategory in Database

                }

            }
        }

        private void MarkupComboBox_DropDownClosed(object sender, EventArgs e)
        {
            if (selectedProduct != null)
            {
                string percent = ((sender as ComboBox).SelectedValue.ToString());
                GetCell(ProductsList, 10).Content = Int32.Parse(percent);

                int key = MarkUpProperty.Where(x => x.Value.Equals(percent)).FirstOrDefault().Key;

                if (key != context.Products.Where(x => x.idProduct == selectedProduct.idProduct).FirstOrDefault().idMarkup)
                {
                    context.Products.Where(x => x.idProduct == selectedProduct.idProduct).FirstOrDefault().idMarkup = key;

                }

            }
        }

        private void MeasurementComboBox_DropDownClosed(object sender, EventArgs e)
        {
            if (selectedProduct != null)
            {
                string discript = ((sender as ComboBox).SelectedValue.ToString());
                GetCell(ProductsList, 11).Content = discript;

                int key = MeasurementProperty.Where(x => x.Value.Equals(discript)).FirstOrDefault().Key;

                if (key != context.Products.Where(x => x.idProduct == selectedProduct.idProduct).FirstOrDefault().idMeasurement)
                {
                    context.Products.Where(x => x.idProduct == selectedProduct.idProduct).FirstOrDefault().idMeasurement = key;

                }

            }
        }

        private void ProducerComboBox_DropDownClosed(object sender, EventArgs e)
        {
            if (selectedProduct != null)
            {
                string name = ((sender as ComboBox).SelectedValue.ToString());
                GetCell(ProductsList, 12).Content = name;

                int key = ProducerProperty.Where(x => x.Value.Equals(name)).FirstOrDefault().Key;

                if (key != context.Products.Where(x => x.idProduct == selectedProduct.idProduct).FirstOrDefault().idProducer)
                {
                    context.Products.Where(x => x.idProduct == selectedProduct.idProduct).FirstOrDefault().idProducer = key;

                }

            }
        }

        private void ClearProductTextBoxes_Click(object sender, RoutedEventArgs e)
        {
            ProductsList.SelectedItem = null;
            addProductButton.IsEnabled = true;
            ProductId.IsReadOnly = false;
            ProductId.Background = Brushes.White;
            CategoryComboBox.SelectedItem = CategoryProperty.First().Value;
            MarkupComboBox.SelectedItem = MarkUpProperty.First().Value;
            MeasurementComboBox.SelectedItem = MeasurementProperty.First().Value;
            ProducerComboBox.SelectedItem = ProducerProperty.First().Value;

        }
        private void ProductId_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (ProductsList.SelectedItem == null)
            {
                var txt = sender as TextBox;
                if (Regex.IsMatch(txt.Text, @"^[0-9]+$") || txt.Text.Length == 0)
                {
                    TextboxProductIsCorrect(txt);
                }
                else
                {
                    TextboxProductIsInCorrect(txt);
                }
            }
        }
        private void ProductName_TextChanged(object sender, TextChangedEventArgs e)
        {
            
                var txt = sender as TextBox;
                if (Regex.IsMatch(txt.Text, @"^[\p{IsCyrillic}a-zA-Z0-9 -]+$") || txt.Text.Length == 0)
                {
                TextboxProductIsCorrect(txt);
                }
                else
                {
                TextboxProductIsInCorrect(txt);
                }
            
        }
        private void ProductPrice_TextChanged(object sender, TextChangedEventArgs e)
        {
            var txt = sender as TextBox;
            if (Regex.IsMatch(txt.Text, @"(^[0-9]+$|^(?:0|[1-9][0-9]*)\.[0-9]+$)") || txt.Text.Length == 0)
            {
                TextboxProductIsCorrect(txt);
            }
            else
            {
                TextboxProductIsInCorrect(txt);
            }

        }
        private void ProductQuantity_TextChanged(object sender, TextChangedEventArgs e)
        {
            var txt = sender as TextBox;
            if (Regex.IsMatch(txt.Text, @"(^[0-9]+$|^(?:0|[1-9][0-9]*)\.[0-9]+$)") || txt.Text.Length == 0)
            {
                TextboxProductIsCorrect(txt);
            }
            else
            {
                TextboxProductIsInCorrect(txt);
            }

        }
        private void TextboxProductIsCorrect(TextBox txt)
        {
            txt.Background = Brushes.White;
            saveChangesProductButton.IsEnabled = true;
            if (ProductsList.SelectedItem == null)
                addProductButton.IsEnabled = true;
        }
        private void TextboxProductIsInCorrect(TextBox txt)
        {
            txt.Background = Brushes.LightCoral;
            saveChangesProductButton.IsEnabled = false;
            if (ProductsList.SelectedItem == null)
                addProductButton.IsEnabled = false;
        }
        #endregion


        #region Producer

        public ObservableCollection<Producer> GetProducers()
        {

            return new ObservableCollection<Producer>(
                    context.Producers.Select(p => p).ToList<Producer>());
        }

        //change title of columns in datagridview
        void producers_AutoGeneratedColumns(object sender, EventArgs e)
        {
            ProducersList.Columns[0].Header = "Код виробника";
            ProducersList.Columns[1].Header = "Назва";
            ProducersList.Columns[2].Visibility = Visibility.Hidden;
            ProducersList.Columns[3].Header = "Адреса";
            ProducersList.Columns[4].Visibility = Visibility.Hidden;

        }

        private void AddProducer_Click(object sender, RoutedEventArgs e)
        {
            if (ProducerName.Text.Length > 0 && ProducerCountry.Text.Length > 0 && ProducerTown.Text.Length > 0 && ProducerStreet.Text.Length > 0)
            {
            context.Addresses.Add(new Address { Country = ProducerCountry.Text, Town = ProducerTown.Text, Street = ProducerStreet.Text });
            context.SaveChanges();
            int lastId = context.Addresses.ToList().Last().idAddress;
            context.Producers.Add(new Producer { Name = ProducerName.Text, idAddress = lastId });
            context.SaveChanges();
            producers = GetProducers();
            ProducersList.ItemsSource = producers;
            //producers.Add(new Producer { idProducer = (int)producers.Last().idProducer + 1, Name = ProducerName.Text, idAddress = lastId, Address = new Address { Country = ProducerCountry.Text, Town = ProducerTown.Text, Street = ProducerStreet.Text } });
            addProducerButton.IsEnabled = false;
            }
            else
            {
                MessageBox.Show("Всі поля повинні бути заповненими!");
            }
        }
        private void DeleteProducer_Click(object sender, RoutedEventArgs e)
        {
            context.Producers.Remove((Producer)ProducersList.SelectedItem);
            producers.Remove((Producer)ProducersList.SelectedItem);
            addProducerButton.IsEnabled = false;
        }
        private void ClearProducerTextBoxes_Click(object sender, RoutedEventArgs e)
        {
            ProducersList.SelectedItem = null;
            addProducerButton.IsEnabled = true;
            ProducerId.Text = "генерується автоматично";
            EnableProducerAddressFields();


        }
        private void ProducersList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ProducersList.SelectedItem != null)
            {
                addProducerButton.IsEnabled = false;
                DisableProducerAddressFields();
                ChangeAddressButton.IsEnabled = true;
            }
            else
            {
                ChangeAddressButton.IsEnabled = false;
            }
        }
        private void ProducerName_TextChanged(object sender, TextChangedEventArgs e)
        {

            var txt = sender as TextBox;
            if (Regex.IsMatch(txt.Text, @"^[\p{IsCyrillic}a-zA-Z -]+$") || txt.Text.Length == 0)
            {
                TextboxIsCorrect(txt);
            }
            else
            {
                TextboxIsInCorrect(txt);
            }
        }
        private void ProducerCountry_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (SaveAddressButton.IsEnabled == true|| ProducersList.SelectedItem == null)
            {
                var txt = sender as TextBox;
                if (Regex.IsMatch(txt.Text, @"^[\p{Lu}A-Z][\p{IsCyrillic}a-zA-Z -]+$") || txt.Text.Length == 0)
                {
                    TextboxIsCorrect(txt);
                }
                else
                {
                    TextboxIsInCorrect(txt);
                }
            }
        }
        private void ProducerTown_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (SaveAddressButton.IsEnabled == true || ProducersList.SelectedItem == null)
            {
                var txt = sender as TextBox;
                if (Regex.IsMatch(txt.Text, @"^[\p{Lu}A-Z][\p{IsCyrillic}a-zA-Z -]+$") || txt.Text.Length == 0)
                {
                    TextboxIsCorrect(txt);
                }
                else
                {
                    TextboxIsInCorrect(txt);
                }
            }
        }
        private void ProducerStreet_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (SaveAddressButton.IsEnabled == true || ProducersList.SelectedItem == null)
            {
                var txt = sender as TextBox;
                if (Regex.IsMatch(txt.Text, @"^[\p{IsCyrillic}a-zA-Z0-9 -]+$") || txt.Text.Length == 0)
                {
                    TextboxIsCorrect(txt);
                }
                else
                {
                    TextboxIsInCorrect(txt);
                }
            }
        }
        private void TextboxIsCorrect(TextBox txt)
        {
            txt.Background = Brushes.White;
            saveChangesProducerButton.IsEnabled = true;
            if (ProducersList.SelectedItem == null)
                addProducerButton.IsEnabled = true;
        }
        private void TextboxIsInCorrect(TextBox txt)
        {
            txt.Background = Brushes.LightCoral;
            saveChangesProducerButton.IsEnabled = false;
            if (ProducersList.SelectedItem == null)
                addProducerButton.IsEnabled = false;
        }

        private void ChangeProducerAddress_Click(object sender, RoutedEventArgs e)
        {
            SaveAddressButton.IsEnabled = true;
            EnableProducerAddressFields();

            tempCountry = ProducerCountry.Text;
            tempTown = ProducerTown.Text;
            tempStreet = ProducerStreet.Text;

        }

        private void SaveChangesProducerAddress_Click(object sender, RoutedEventArgs e)
        {
                       
            if(tempCountry!=ProducerCountry.Text||tempTown!=ProducerTown.Text||tempStreet!=ProducerStreet.Text)
            {
                if(ProducerCountry.Text.Length>0&&ProducerTown.Text.Length>0&&ProducerStreet.Text.Length>0)
                {
                    context.SaveChanges();
                    producers = GetProducers();
                    ProducersList.ItemsSource = producers;
                   
                }
                else
                {
                    MessageBox.Show("Всі поля адреси повинні бути заповненими!");
                }
            }
            DisableProducerAddressFields();

        }
        private void EnableProducerAddressFields()
        {
            ProducerCountry.Background = Brushes.White;
            ProducerCountry.IsReadOnly = false;
            ProducerTown.Background = Brushes.White;
            ProducerTown.IsReadOnly = false;
            ProducerStreet.Background = Brushes.White;
            ProducerStreet.IsReadOnly = false;
        }
        private void DisableProducerAddressFields()
        {
            SaveAddressButton.IsEnabled = false;
            ProducerCountry.Background = Brushes.LightGray;
            ProducerCountry.IsReadOnly = false;
            ProducerTown.Background = Brushes.LightGray;
            ProducerTown.IsReadOnly = false;
            ProducerStreet.Background = Brushes.LightGray;
            ProducerStreet.IsReadOnly = false;
        }

        #endregion


        #region Supplier

        public ObservableCollection<Supplier> GetSuppliers()
        {

            return new ObservableCollection<Supplier>(
                    context.Suppliers.Select(p => p).ToList<Supplier>());
        }

        //change title of columns in datagridview
        void suppliers_AutoGeneratedColumns(object sender, EventArgs e)
        {
            SuppliersList.Columns[0].Header = "Код постачальника";
            SuppliersList.Columns[1].Header = "Назва";
            SuppliersList.Columns[2].Visibility = Visibility.Hidden;
            SuppliersList.Columns[3].Header = "Адреса";
            SuppliersList.Columns[4].Visibility = Visibility.Hidden;
        }

        private void AddSupplier_Click(object sender, RoutedEventArgs e)
        {
            if (SupplierName.Text.Length > 0 && SupplierCountry.Text.Length>0 && SupplierTown.Text.Length>0 && SupplierStreet.Text.Length>0)
            {
            context.Addresses.Add(new Address { Country = SupplierCountry.Text, Town = SupplierTown.Text, Street = SupplierStreet.Text });
            context.SaveChanges();
            int lastId = context.Addresses.ToList().Last().idAddress;
            context.Suppliers.Add(new Supplier { Name = SupplierName.Text, idAddress = lastId });
            context.SaveChanges();
            suppliers = GetSuppliers();
            SuppliersList.ItemsSource = suppliers;
                //suppliers.Add(new Supplier { idSupplier = (int)suppliers.Last().idSupplier + 1, Name = SupplierName.Text, idAddress = lastId, Address = new Address { Country = SupplierCountry.Text, Town = SupplierTown.Text, Street = SupplierStreet.Text } });
            addSupplierButton.IsEnabled = false;
            }
            else
            {
                MessageBox.Show("Всі поля повинні бути заповненими!");
            }
        }
        private void DeleteSupplier_Click(object sender, RoutedEventArgs e)
        {
            context.Suppliers.Remove((Supplier)SuppliersList.SelectedItem);
            suppliers.Remove((Supplier)SuppliersList.SelectedItem);
            addSupplierButton.IsEnabled = false;
        }
        private void ClearSupplierTextBoxes_Click(object sender, RoutedEventArgs e)
        {
            SuppliersList.SelectedItem = null;
            addSupplierButton.IsEnabled = true;
            SupplierId.Text = "генерується автоматично";
            EnableSupplierAddressFields();
        }
        private void SuppliersList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (SuppliersList.SelectedItem != null)
            {
                addSupplierButton.IsEnabled = false;
                DisableSupplierAddressFields();
                ChangeSupplierAddressButton.IsEnabled = true;
            }
            else
            {
                ChangeSupplierAddressButton.IsEnabled = false;
            }
        }
        private void SupplierName_TextChanged(object sender, TextChangedEventArgs e)
        {
            var txt = sender as TextBox;
            if (Regex.IsMatch(txt.Text, @"^[\p{IsCyrillic}a-zA-Z -]+$") || txt.Text.Length == 0)
            {
                TextboxIsCorrectSupplier(txt);
            }
            else
            {
                TextboxIsInCorrectSupplier(txt);
            }
        }
        private void SupplierCountry_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (SaveSupplierAddressButton.IsEnabled == true || SuppliersList.SelectedItem == null)
            {
                var txt = sender as TextBox;
                if (Regex.IsMatch(txt.Text, @"^[\p{Lu}A-Z][\p{IsCyrillic}a-zA-Z -]+$") || txt.Text.Length == 0)
                {
                    TextboxIsCorrectSupplier(txt);
                }
                else
                {
                    TextboxIsInCorrectSupplier(txt);
                }
            }
        }
        private void SupplierTown_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (SaveSupplierAddressButton.IsEnabled == true || SuppliersList.SelectedItem == null)
            {
                var txt = sender as TextBox;
                if (Regex.IsMatch(txt.Text, @"^[\p{Lu}A-Z][\p{IsCyrillic}a-zA-Z -]+$") || txt.Text.Length == 0)
                {
                    TextboxIsCorrectSupplier(txt);
                }
                else
                {
                    TextboxIsInCorrectSupplier(txt);
                }
            }
        }
        private void SupplierStreet_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (SaveSupplierAddressButton.IsEnabled == true || SuppliersList.SelectedItem == null)
            {
                var txt = sender as TextBox;
                if (Regex.IsMatch(txt.Text, @"^[\p{IsCyrillic}a-zA-Z0-9 -]+$") || txt.Text.Length == 0)
                {
                    TextboxIsCorrectSupplier(txt);
                }
                else
                {
                    TextboxIsInCorrectSupplier(txt);
                }
            }
        }
        private void TextboxIsCorrectSupplier(TextBox txt)
        {
            txt.Background = Brushes.White;
            saveChangesSupplierButton.IsEnabled = true;
            if (SuppliersList.SelectedItem == null)
                addSupplierButton.IsEnabled = true;
        }
        private void TextboxIsInCorrectSupplier(TextBox txt)
        {
            txt.Background = Brushes.LightCoral;
            saveChangesSupplierButton.IsEnabled = false;
            if (SuppliersList.SelectedItem == null)
                addSupplierButton.IsEnabled = false;
        }

        private void ChangeSupplierAddress_Click(object sender, RoutedEventArgs e)
        {
            SaveSupplierAddressButton.IsEnabled = true;
            EnableSupplierAddressFields();

            tempCountry = SupplierCountry.Text;
            tempTown = SupplierTown.Text;
            tempStreet = SupplierStreet.Text;

        }

        private void SaveChangesSupplierAddress_Click(object sender, RoutedEventArgs e)
        {

            if (tempCountry != SupplierCountry.Text || tempTown != SupplierTown.Text || tempStreet != SupplierStreet.Text)
            {
                if (SupplierCountry.Text.Length > 0 && SupplierTown.Text.Length > 0 && SupplierStreet.Text.Length > 0)
                {
                    context.SaveChanges();
                    suppliers = GetSuppliers();
                    SuppliersList.ItemsSource = suppliers;

                }
                else
                {
                    MessageBox.Show("Всі поля адреси повинні бути заповненими!");
                }
            }
            DisableSupplierAddressFields();

        }
        private void EnableSupplierAddressFields()
        {
            SupplierCountry.Background = Brushes.White;
            SupplierCountry.IsReadOnly = false;
            SupplierTown.Background = Brushes.White;
            SupplierTown.IsReadOnly = false;
            SupplierStreet.Background = Brushes.White;
            SupplierStreet.IsReadOnly = false;
        }
        private void DisableSupplierAddressFields()
        {
            SaveSupplierAddressButton.IsEnabled = false;
            SupplierCountry.Background = Brushes.LightGray;
            SupplierCountry.IsReadOnly = false;
            SupplierTown.Background = Brushes.LightGray;
            SupplierTown.IsReadOnly = false;
            SupplierStreet.Background = Brushes.LightGray;
            SupplierStreet.IsReadOnly = false;
        }
        #endregion

        #region Category
        public ObservableCollection<Category> GetCategories()
        {

            return new ObservableCollection<Category>(
                    context.Categories.Select(p => p).ToList<Category>());
        }

        //change title of columns in datagridview
        void categories_AutoGeneratedColumns(object sender, EventArgs e)
        {
            CategoriesList.Columns[0].Header = "Код категорії";
            CategoriesList.Columns[1].Header = "Назва";
            CategoriesList.Columns[2].Visibility = Visibility.Hidden;//hide column

        }

        private void AddCategory_Click(object sender, RoutedEventArgs e)
        {
            if (CategoryName.Text.Length > 0)
            {
                context.Categories.Add(new Category { Name = CategoryName.Text });
                context.SaveChanges();
                categories = GetCategories();
                CategoriesList.ItemsSource = categories;
                addCategoryButton.IsEnabled = false;
            }
            else
            {
                MessageBox.Show("Всі поля повинні бути заповненими!");
            }

        }
        private void DeleteCategory_Click(object sender, RoutedEventArgs e)
        {
            context.Categories.Remove((Category)CategoriesList.SelectedItem);
            categories.Remove((Category)CategoriesList.SelectedItem);
            addCategoryButton.IsEnabled = false;
        }

        private void ClearCategoryTextBoxes_Click(object sender, RoutedEventArgs e)
        {
            CategoriesList.SelectedItem = null;
            addCategoryButton.IsEnabled = true;
            CategoryId.Text = "генерується автоматично";

        }
        private void CategoriesList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (CategoriesList.SelectedItem != null)
            {
                addCategoryButton.IsEnabled = false;
            }
        }
        private void CategoryName_TextChanged(object sender, TextChangedEventArgs e)
        {
            var txt = sender as TextBox;
            if (Regex.IsMatch(txt.Text, @"^[\p{IsCyrillic}a-zA-Z ]+$") || txt.Text.Length == 0)
            {
                txt.Background = Brushes.White;
                saveChangesCategoryButton.IsEnabled = true;
                if (CategoriesList.SelectedItem == null)
                    addCategoryButton.IsEnabled = true;
            }
            else
            {
                txt.Background = Brushes.LightCoral;
                saveChangesCategoryButton.IsEnabled = false;
                if (CategoriesList.SelectedItem == null)
                    addCategoryButton.IsEnabled = false;
            }
        }
        #endregion


        #region Reports

        public ObservableCollection<User> GetCashiers()
        {

            return new ObservableCollection<User>(
                    context.Users.Where(u => u.Admin == false).Select(p => p).ToList<User>());
        }

        private void searchReportClick(object sender, RoutedEventArgs e)
        {
            ShopEntities data = context;
            DateTime? fromDate = dateFrom.SelectedDate;
            DateTime? toDate = dateTo.SelectedDate;


            var user = (User)cashierComboBox.SelectedItem;
            var customer = (Customer)customerComboBox.SelectedItem;
            var sales = data.Sales.Where(s => s.DateSale >= fromDate && s.DateSale <= toDate).Select(x => x);

            if (user != null && customer == null)
            {
                sales = sales.Where(s => s.idUser == user.idUser).Select(x => x);
            }
            if (user == null && customer != null)
            {
                sales = sales.Where(s => s.idCustomer == customer.idCustomer).Select(x => x);
            }
            if (user != null && customer != null)
            {
                sales = sales.Where(s => s.idUser == user.idUser).Select(x => x);
                sales = sales.Where(s => s.idCustomer == customer.idCustomer).Select(x => x);
            }


            var prod = from sl in sales
                       from pq in data.ProductOrderQuantities
                       where (pq.IdSale == sl.idSale)
                       group pq by pq.IdProduct
                      into grp
                       select new { idProduct = grp.Key, Quantity = grp.Select(x => x.Quantity).Sum() };

            var rez = from p in data.Products
                      from pr in prod
                      from m in data.Measurements
                      from markup in data.Markups
                      where (p.idProduct == pr.idProduct && p.idMeasurement == m.idMeasurement && p.idMarkup == markup.idMarkup)
                      select new
                      {
                          Name = p.Name,
                          id = pr.idProduct,
                          Quantity = pr.Quantity,
                          Measurement = m.Description,
                          Price = p.Price,
                          TotalSupplyPrice = p.Price * pr.Quantity,
                          TotalSalePrice = (p.Price + p.Price * markup.Percent / 100) * pr.Quantity,
                          Profit = pr.Quantity * p.Price * markup.Percent / 100
                      };

            var resultList = rez.ToList();

            foreach (var el in resultList)
            {
                totalSupply += el.TotalSupplyPrice;
                totalSale += el.TotalSalePrice;
                totalProfit += el.Profit;
            }

            totalSupplyLabel.Content = totalSupply;
            totalSaleLabel.Content = totalSale;
            totalProfitLabel.Content = totalProfit;

            dataGridReport.ItemsSource = resultList;
        }
        void reports_AutoGeneratedColumns(object sender, EventArgs e)
        {
            dataGridReport.Columns[0].Header = "Назва продукту";
            dataGridReport.Columns[1].Header = "Код";
            dataGridReport.Columns[2].Header = "Кількість";
            dataGridReport.Columns[3].Header = "Од.виміру";
            dataGridReport.Columns[4].Header = "Ціна од.";
            dataGridReport.Columns[5].Header = "Ціна поставки";
            dataGridReport.Columns[6].Header = "Ціна продажу";
            dataGridReport.Columns[7].Header = "Прибуток";
        }
        #endregion

        #region MarkUP

        public ObservableCollection<Markup> GetMarkUps()
        {

            return new ObservableCollection<Markup>(
                    context.Markups.Select(p => p).ToList<Markup>());
        }

        //change title of columns in datagridview
        void markUps_AutoGeneratedColumns(object sender, EventArgs e)
        {
            MarkUpList.Columns[0].Header = "Код націнки";
            MarkUpList.Columns[1].Header = "Назва";
            MarkUpList.Columns[2].Header = "Відсоток";
            MarkUpList.Columns[3].Visibility = Visibility.Hidden;//hide column

        }

        private void AddMarkUp_Click(object sender, RoutedEventArgs e)
        {
            if (MarkUpName.Text.Length > 0 && MarkUpPercent.Text.Length>0)
            {
                context.Markups.Add(new Markup { Name = MarkUpName.Text, Percent = Int32.Parse(MarkUpPercent.Text) });
                context.SaveChanges();
                markUps = GetMarkUps();
                MarkUpList.ItemsSource = markUps;
                addMarkUpButton.IsEnabled = false;
            }
            else
            {
                MessageBox.Show("Всі поля повинні бути заповненими!");
            }

        }
        private void DeleteMarkUp_Click(object sender, RoutedEventArgs e)
        {
            context.Markups.Remove((Markup)MarkUpList.SelectedItem);
            markUps.Remove((Markup)MarkUpList.SelectedItem);
            addMarkUpButton.IsEnabled = false;
        }

        private void ClearMarkUpTextBoxes_Click(object sender, RoutedEventArgs e)
        {
            MarkUpList.SelectedItem = null;
            addMarkUpButton.IsEnabled = true;
            MarkUpId.Text = "генерується автоматично";

        }
        
        private void MarkUpList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (MarkUpList.SelectedItem != null)
            {
                addMarkUpButton.IsEnabled = false;
            }
        }
        private void MarkUpName_TextChanged(object sender, TextChangedEventArgs e)
        {
            var txt = sender as TextBox;
            if (Regex.IsMatch(txt.Text, @"^[\p{IsCyrillic}a-zA-Z0-9 ]+$") || txt.Text.Length == 0)
            {
                TextboxIsCorrectMarkUp(txt);
            }
            else
            {
                TextboxIsInCorrectMarkUp(txt);
            }
        }
        private void MarkUpPercent_TextChanged(object sender, TextChangedEventArgs e)
        {
            var txt = sender as TextBox;
            if (Regex.IsMatch(txt.Text, @"^[0-9]+$") || txt.Text.Length == 0)
            {
                TextboxIsCorrectMarkUp(txt);
            }
            else
            {
                TextboxIsInCorrectMarkUp(txt);
            }
        }
        private void TextboxIsCorrectMarkUp(TextBox txt)
        {
            txt.Background = Brushes.White;
            saveChangesMarkUpButton.IsEnabled = true;
            if (MarkUpList.SelectedItem == null)
                addMarkUpButton.IsEnabled = true;
        }
        private void TextboxIsInCorrectMarkUp(TextBox txt)
        {
            txt.Background = Brushes.LightCoral;
            saveChangesMarkUpButton.IsEnabled = false;
            if (MarkUpList.SelectedItem == null)
                addMarkUpButton.IsEnabled = false;
        }
        #endregion

        #region Measurement

        public ObservableCollection<Measurement> GetMeasurements()
        {

            return new ObservableCollection<Measurement>(
                    context.Measurements.Select(p => p).ToList<Measurement>());
        }

        //change title of columns in datagridview
        void measurements_AutoGeneratedColumns(object sender, EventArgs e)
        {
            MeasurementsList.Columns[0].Header = "Код одиниці виміру";
            MeasurementsList.Columns[1].Header = "Назва";
            MeasurementsList.Columns[2].Header = "Опис";
            MeasurementsList.Columns[3].Visibility = Visibility.Hidden;//hide column

        }

        private void AddMeasurement_Click(object sender, RoutedEventArgs e)
        {
            if (MeasurementName.Text.Length > 0 && MeasurementDescription.Text.Length > 0)
            {
            context.Measurements.Add(new Measurement { Name = MeasurementName.Text, Description = MeasurementDescription.Text });
            context.SaveChanges();
            measurements = GetMeasurements();
            MeasurementsList.ItemsSource = measurements;
            addMeasurementButton.IsEnabled = false;
            }
            else
            {
                MessageBox.Show("Всі поля повинні бути заповненими!");
            }

        }
        private void DeleteMeasurement_Click(object sender, RoutedEventArgs e)
        {
            context.Measurements.Remove((Measurement)MeasurementsList.SelectedItem);
            measurements.Remove((Measurement)MeasurementsList.SelectedItem);
            addMeasurementButton.IsEnabled = false;
        }

        private void ClearMeasurementTextBoxes_Click(object sender, RoutedEventArgs e)
        {
            MeasurementsList.SelectedItem = null;
            addMeasurementButton.IsEnabled = true;
            MeasurementId.Text = "генерується автоматично";

        }
        private void MeasurementsList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (MeasurementsList.SelectedItem != null)
            {
                addMeasurementButton.IsEnabled = false;
            }
        }
        private void MeasurementName_TextChanged(object sender, TextChangedEventArgs e)
        {
            var txt = sender as TextBox;
            if (Regex.IsMatch(txt.Text, @"^[\p{IsCyrillic}a-zA-Z ]+$") || txt.Text.Length == 0)
            {
                TextboxIsCorrectMeasurement(txt);
            }
            else
            {
                TextboxIsInCorrectMeasurement(txt);
            }
        }
        private void MeasurementDescription_TextChanged(object sender, TextChangedEventArgs e)
        {
            var txt = sender as TextBox;
            if (Regex.IsMatch(txt.Text, @"^[\p{IsCyrillic}a-zA-Z .]+$") || txt.Text.Length == 0)
            {
                TextboxIsCorrectMeasurement(txt);
            }
            else
            {
                TextboxIsInCorrectMeasurement(txt);
            }
        }
        private void TextboxIsCorrectMeasurement(TextBox txt)
        {
            txt.Background = Brushes.White;
            saveChangesMeasurementButton.IsEnabled = true;
            if (MeasurementsList.SelectedItem == null)
                addMeasurementButton.IsEnabled = true;
        }
        private void TextboxIsInCorrectMeasurement(TextBox txt)
        {
            txt.Background = Brushes.LightCoral;
            saveChangesMeasurementButton.IsEnabled = false;
            if (MeasurementsList.SelectedItem == null)
                addMeasurementButton.IsEnabled = false;
        }
        #endregion

        private void SaveChanges_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                context.SaveChanges();
                MessageBox.Show("Зміни успішно збережені.");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        private void buttonQuit_Click(object sender, RoutedEventArgs e)
        {
            //context.SaveChanges();
            Close();
        }

        #region GETCELL // methods to find cell in selected row


        public static T GetVisualChild<T>(Visual parent) where T : Visual
        {
            T child = default(T);
            int numVisuals = VisualTreeHelper.GetChildrenCount(parent);
            for (int i = 0; i < numVisuals; i++)
            {
                Visual v = (Visual)VisualTreeHelper.GetChild(parent, i);
                child = v as T;
                if (child == null)
                {
                    child = GetVisualChild<T>(v);
                }
                if (child != null)
                {
                    break;
                }
            }
            return child;
        }

        public static DataGridCell GetCell(DataGrid grid, int column)
        {
            DataGridRow row = grid.ItemContainerGenerator.ContainerFromIndex(grid.SelectedIndex) as DataGridRow;

            if (row != null)
            {
                DataGridCellsPresenter presenter = GetVisualChild<DataGridCellsPresenter>(row);

                if (presenter == null)
                {
                    grid.ScrollIntoView(row, grid.Columns[column]);
                    presenter = GetVisualChild<DataGridCellsPresenter>(row);
                }

                DataGridCell cell = (DataGridCell)presenter.ItemContainerGenerator.ContainerFromIndex(column);
                return cell;
            }
            return null;
        }


        #endregion

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            cashierComboBox.SelectedItem = null;
            customerComboBox.SelectedItem = null;
            dateFrom.SelectedDate = null;
            dateTo.SelectedDate = null;
        }

        private void saveReport_Click(object sender, RoutedEventArgs e)
        {
            // TODO Save report
        }


    }
}



